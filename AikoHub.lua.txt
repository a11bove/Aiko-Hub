local ui = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

if not game:IsLoaded() then
    game.Loaded:Wait()
end
ui:Notify({
    Title = "Aiko Hub",
    Content = "Aiko Hub Loaded!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})

local VirtualInputManager = game:GetService("VirtualInputManager")
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local minimizeUI = Enum.KeyCode.RightShift
local DragUI = Instance.new("ScreenGui")
DragUI.Name = "AikoHubMinimizeUI"
DragUI.ResetOnSpawn = false
DragUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
DragUI.Parent = CoreGui
local Button = Instance.new("ImageButton")
Button.Parent = DragUI
Button.Size = UDim2.new(0, 55, 0, 55)
Button.Position = UDim2.new(0, 20, 1, -125)
Button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Button.BackgroundTransparency = 0.3
Button.BorderSizePixel = 0
Button.ClipsDescendants = true
Button.Image = "rbxassetid://140356301069419"
Button.ScaleType = Enum.ScaleType.Fit
Button.Active = true
Button.ZIndex = 1000
Button.AutoButtonColor = false
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = Button

local function SimulateKeyPress()
    UserInputService.MouseIconEnabled = false

    VirtualInputManager:SendKeyEvent(true, minimizeUI, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, minimizeUI, false, game)
end

local isDragging = false
local dragThreshold = 10
Button.MouseButton1Click:Connect(
    function()
        if isDragging then
            return
        end

        local tween =
            TweenService:Create(
            Button,
            tweenInfo,
            {
                BackgroundTransparency = 0.3,
                Size = UDim2.new(0, 50, 0, 50),
                Rotation = 5
            }
        )
        tween:Play()
        task.wait(0.1)
        local tweenBack =
            TweenService:Create(
            Button,
            tweenInfo,
            {
                BackgroundTransparency = 0.3,
                Size = UDim2.new(0, 60, 0, 60),
                Rotation = 0
            }
        )
        tweenBack:Play()

        SimulateKeyPress()
    end
)

local dragging, dragStart, startPos
local function StartDrag(input)
    isDragging = false
    dragging = true
    dragStart = input.Position
    startPos = Button.Position
    input.Changed:Connect(
        function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end
    )
end

local function OnDrag(input)
    if dragging then
        local delta = (input.Position - dragStart).Magnitude
        if delta > dragThreshold then
            isDragging = true
        end
        Button.Position =
            UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + (input.Position.X - dragStart.X),
            startPos.Y.Scale,
            startPos.Y.Offset + (input.Position.Y - dragStart.Y)
        )
    end
end

Button.InputBegan:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            StartDrag(input)
        end
    end
)

Button.InputChanged:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            OnDrag(input)
        end
    end
)

local rs = game:GetService("ReplicatedStorage")
local ts = game:GetService("TeleportService")
local Rs = game:GetService("RunService")
local hs = game:GetService("HttpService")
local ws = game:GetService("Workspace")
local players = game:GetService("Players")
local player = game.Players.LocalPlayer
local leaderstats = player:FindFirstChild("leaderstats")
local shecklesValue =
    leaderstats and leaderstats:FindFirstChild("Sheckles") and leaderstats:FindFirstChild("Sheckles").Value or 0
local plantRemote = rs:WaitForChild("GameEvents"):WaitForChild("Plant_RE")
local char = player.Character or player.CharacterAdded:Wait()
local GameEvents = rs:WaitForChild("GameEvents")
local scrollingFrame = game:GetService("Players").LocalPlayer.PlayerGui.ActivePetUI.Frame.Main.ScrollingFrame
local feedsc = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("ActivePetService")
local backpack = player.Backpack
local modules = rs:WaitForChild("Modules")
local vu = game:GetService("VirtualUser")

local validSeeds = {
    "Carrot",
    "Strawberry",
    "Blueberry",
    "Tomato",
    "Cauliflower",
    "Watermelon",
    "Rafflesia",
    "Green Apple",
    "Avocado",
    "Banana",
    "Pineapple",
    "Kiwi",
    "Bell Pepper",
    "Prickly Pear",
    "Loquat",
    "Feijoa",
    "Pitcher",
    "Sugar Apple"
}

local validGears = {
    "Watering Can",
    "Trowel",
    "Recall Wrench",
    "Basic Sprinkler",
    "Advanced Sprinkler",
    "Godly Sprinkler",
    "Magnifying Glass",
    "Tanning Mirror",
    "Master Sprinkler",
    "Cleaning Spray",
    "Favorite Tool",
    "Harvest Tool",
    "Friendship Pot"
}

local validEggs = {
    "Common Egg",
    "Common Summer Egg",
    "Rare Summer Egg",
    "Mythical Egg",
    "Paradise Egg",
    "Bug Egg",
    "Bee Egg"
}

local eggIdMap = {
    ["Common Egg"] = 1,
    ["Common Summer Egg"] = 2,
    ["Rare Summer Egg"] = 3,
    ["Mythical Egg"] = 4,
    ["Paradise Egg"] = 5,
    ["Bug Egg"] = 6,
    ["Bee Egg"] = 7
}

local buyAllSummer = {
    "Summer Seed Pack",
    "Delphinium Seed",
    "Mutation Spray Burnt",
    "Lily of the Valley Seed",
    "Traveler's Fruit Seed",
    "Oasis Crate",
    "Oasis Egg",
    "Hamster"
}

local dropdownValues = {"All"}
for _, item in ipairs(buyAllSummer) do
    table.insert(dropdownValues, item)
end

local buyGear = nil
local buyPet = nil
local buyEvent = nil
local buySummer = nil

if rs:FindFirstChild("GameEvents") then
    local gameEvents = rs.GameEvents
    buyEvent = gameEvents:FindFirstChild("BuySeedStock")
    buyGear = gameEvents:FindFirstChild("BuyGearStock")
    buyPet = gameEvents:FindFirstChild("BuyPetEgg")
    buySummer = gameEvents:FindFirstChild("BuyEventShopStock")
end

local selectedSeed = {}
local selectedGears = {}
local selectedEgg = {}
local selectedSummer = {}
local autoBuyingAll = false
local autoSubmitAll = false
local summerSubmitDelay = 3
local hatchAura = false
local AutoPlanting = false
local CurrentlyPlanting = false
local plantingDelay = 0.1
local plantingMode = "Player Position"
local pickupAura = false
local pickupRange = 300
local pickupDelay = 0.1
local selectedPetUUID = nil
local petList = {}
local petDropdownValues = {}
local noclipEnabled = false
local noclipConn = nil
local infJumpEnabled = false
local versgame = "Unknown"
local infJumpConn = nil
local antiAfkEnabled = false
local best_fruit = nil
local auto_place_eggs = false
local place_egg_method = ""
local selected_position_egg = nil

local farm = nil
if ws:FindFirstChild("Farm") then
    for _, v in next, ws.Farm:GetDescendants() do
        if v.Name == "Owner" and v:IsA("StringValue") and v.Value == player.Name then
            farm = v.Parent.Parent
            break
        end
    end
end

local plot = nil

for _, v in farm:GetDescendants() do
    if v.Name == "Owner" and v.Value == player.Name then
        plot = v.Parent.Parent
        break
    end
end

if not plot then
    return
end

player.Idled:Connect(
    function()
        if antiAfkEnabled then
            vu:CaptureController()
            vu:ClickButton2(Vector2.new())
        end
    end
)

local function startPickupAura()
    if not pickupAura then
        return
    end

    task.spawn(
        function()
            while pickupAura do
                for _, v in next, farm:FindFirstChild("Plants_Physical"):GetChildren() do
                    if v:IsA("Model") and player.Character:FindFirstChild("HumanoidRootPart") then
                        for _, v2 in next, v:GetDescendants() do
                            if
                                v2:IsA("ProximityPrompt") and
                                    (v:GetPivot().Position - player.Character:GetPivot().Position).Magnitude <
                                        pickupRange
                             then
                                fireproximityprompt(v2)
                                task.wait(pickupDelay)
                            end
                        end
                    end
                end
                task.wait()
            end
        end
    )
end

local function getPlayerPosition()
    local char = player.Character or player.CharacterAdded:Wait()
    local root = char:FindFirstChild("HumanoidRootPart")
    return root and root.Position or Vector3.zero
end

local function getEquippedSeedTool()
    if not player.Character then
        return nil
    end

    local equippedTool = player.Character:FindFirstChildOfClass("Tool")
    if equippedTool then
        local seedName = equippedTool.Name:match("^(.-) Seed")
        if seedName and table.find(SelectedSeeds, seedName) then
            return {Tool = equippedTool, SeedName = seedName}
        end
    end
    return nil
end

local function getRandomPosition()
    local playerPos = getPlayerPosition()
    if not playerPos or playerPos == Vector3.zero then
        return playerPos
    end

    local randomX = playerPos.X + math.random(-20, 20)
    local randomZ = playerPos.Z + math.random(-20, 20)

    local randomY = playerPos.Y + math.random(0, 5)

    return Vector3.new(randomX, randomY, randomZ)
end

local function getPlantingPosition()
    if plantingMode == "Random Position" then
        return getRandomPosition()
    else
        return getPlayerPosition()
    end
end

local function plantEquippedSeed(seedName)
    local pos = getPlantingPosition()
    if plantRemote and pos and pos ~= Vector3.zero then
        pcall(
            function()
                plantRemote:FireServer(pos, seedName)
            end
        )
    end
end

local function startAutoPlanting()
    if CurrentlyPlanting then
        return
    end
    CurrentlyPlanting = true

    task.spawn(
        function()
            while AutoPlanting do
                pcall(
                    function()
                        local equippedSeed = getEquippedSeedTool()

                        if equippedSeed then
                            local seedName = equippedSeed.SeedName
                            local tool = equippedSeed.Tool

                            if table.find(SelectedSeeds, seedName) then
                                if player.Character and player.Character:FindFirstChild(tool.Name) then
                                    plantEquippedSeed(seedName)
                                end
                            end
                        end
                    end
                )
                task.wait(plantingDelay)
            end

            CurrentlyPlanting = false
        end
    )
end

local function toggleAutoPlanting(state)
    AutoPlanting = state
    if AutoPlanting then
        if not plantRemote then
            return
        end

        if not player.Character then
            player.CharacterAdded:Wait()
        end

        startAutoPlanting()
    end
end

local function setPlantingDelay(delay)
    plantingDelay = math.max(0.1, delay)
end

local function setPlantingMode(mode)
    plantingMode = mode
end

local function startHatchAura()
    if not hatchAura or not farm then
        return
    end
    task.spawn(
        function()
            while hatchAura do
                pcall(
                    function()
                        local objectsPhysical = farm:FindFirstChild("Objects_Physical")
                        if objectsPhysical and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            for _, v in next, objectsPhysical:GetChildren() do
                                if
                                    v:IsA("Model") and v:GetAttribute("TimeToHatch") == 0 and
                                        (v:GetPivot().Position - player.Character:GetPivot().Position).Magnitude < 500
                                 then
                                    local model = v:FindFirstChildOfClass("Model")
                                    if model then
                                        for _, v2 in next, model:GetChildren() do
                                            if v2:IsA("ProximityPrompt") and v2.Name == "ProximityPrompt" then
                                                fireproximityprompt(v2)
                                                task.wait(0.00001)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                )
                task.wait()
            end
        end
    )
end

local function submitAllSummerWithDelay()
    task.spawn(
        function()
            while autoSubmitAll do
                pcall(
                    function()
                        game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild(
                            "SummerHarvestRemoteEvent"
                        ):FireServer("SubmitAllPlants")
                    end
                )
                task.wait(summerSubmitDelay)
            end
        end
    )
end

local function getGameVersion()
    local success, result =
        pcall(
        function()
            if player and player.PlayerGui and player.PlayerGui:FindFirstChild("Version_UI") then
                local versionUI = player.PlayerGui.Version_UI
                if versionUI:FindFirstChild("Version") then
                    return (versionUI.Version.Text):gsub("^v", "")
                end
            end
            return "Unknown"
        end
    )

    return success and result or "Unknown"
end

local function getAllPlayerPets()
    local pets = {}
    local dropdownValues = {}

    pcall(
        function()
            for _, v in pairs(ws:FindFirstChild("PetsPhysical"):GetChildren()) do
                if v:IsA("Part") and v:GetAttribute("OWNER") == player.Name and v:GetAttribute("UUID") then
                    local petName =
                        v:GetAttribute("PetName") or v:GetAttribute("Name") or v:GetAttribute("petName") or
                        v:GetAttribute("Pet") or
                        v:GetAttribute("PET_NAME") or
                        v.Name

                    if petName == "PetMover" or petName == v.Name then
                        for _, attr in pairs(v:GetAttributes()) do
                            if type(attr) == "string" and attr ~= "PetMover" and attr ~= v.Name and attr ~= player.Name then
                                petName = attr
                                break
                            end
                        end
                    end

                    local petUUID = v:GetAttribute("UUID")
                    local displayName = petName

                    pets[petUUID] = {
                        name = petName,
                        displayName = displayName,
                        part = v
                    }
                    table.insert(dropdownValues, displayName)
                end
            end
        end
    )

    return pets, dropdownValues
end

local function refreshPetList()
    petList, petDropdownValues = getAllPlayerPets()
    return petDropdownValues
end

local function getSelectedPet()
    if not selectedPetUUID or not petList[selectedPetUUID] then
        return nil
    end
    return petList[selectedPetUUID].part
end

local function closestPet()
    local pet = nil
    local distance = math.huge

    for _, v in next, ws:FindFirstChild("PetsPhysical"):GetChildren() do
        if v:IsA("Part") and v:GetAttribute("OWNER") == player.Name and v:GetAttribute("UUID") then
            local dist = (v:GetPivot().Position - player.Character:GetPivot().Position).Magnitude
            if dist < distance then
                distance = dist
                pet = v
            end
        end
    end

    return pet
end

local function ToggleNoclip(state)
    noclipEnabled = state
    if noclipEnabled and not noclipConn then
        noclipConn =
            Rs.Stepped:Connect(
            function()
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        )
    elseif not noclipEnabled and noclipConn then
        noclipConn:Disconnect()
        noclipConn = nil
    end
end

local function ToggleInfJump(state)
    infJumpEnabled = state
end

if not infJumpConn then
    infJumpConn =
        UserInputService.JumpRequest:Connect(
        function()
            if infJumpEnabled and char and char:FindFirstChildOfClass("Humanoid") then
                char:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    )
end

local object_physical = farm:FindFirstChild("Objects_Physical")

if not object_physical then
    return
end

local function get_tool()
    return player.Character:FindFirstChildOfClass("Tool")
end

function is_full()
    return #backpack:GetChildren() > 200
end

versgame = getGameVersion()

local win =
    ui:CreateWindow(
    {
        Title = "Aiko Hub",
        Author = "Grow a Garden | Freemium v1.7.1",
        Icon = "rbxassetid://140356301069419",
        Folder = "AIKOHUB",
        Size = UDim2.fromOffset(540, 400),
        Transparent = true,
        Theme = "Dark",
        SideBarWidth = 200,
        HideSearchBar = true,
        ScrollBarEnabled = false
    }
)

win:IsResizable(false)
win:SetToggleKey(Enum.KeyCode.RightShift)

local ConfigManager = win.ConfigManager
local cfg = ConfigManager:CreateConfig("CFGAIKO")
ConfigManager:AllConfigs()

win:EditOpenButton(
    {
        Enabled = false
    }
)

win:DisableTopbarButtons(
    {
        "Fullscreen"
    }
)

local Info =
    win:Tab(
    {
        Title = "Main",
        Icon = "info",
        Locked = false
    }
)

local Main =
    win:Tab(
    {
        Title = "Farm",
        Icon = "sprout",
        Locked = false
    }
)

local Shop =
    win:Tab(
    {
        Title = "Shop",
        Icon = "shopping-cart",
        Locked = false
    }
)

local Pet =
    win:Tab(
    {
        Title = "Pet",
        Icon = "paw-print",
        Locked = false
    }
)

local VisTab =
    win:Tab(
    {
        Title = "Visual",
        Icon = "eye",
        Locked = false
    }
)

local sts =
    win:Tab(
    {
        Title = "Settings",
        Icon = "settings",
        Locked = false
    }
)

win:SelectTab(1)

local Paragraph =
    Info:Paragraph(
    {
        Title = "Changelog (1.7.1)",
        Desc = "[+] Added Plant Value ESP\n[-] Fixed Config Bug\n[+] Added Auto Place Eggs",
        Thumbnail = "rbxassetid://78448020433476",
        ThumbnailSize = 67,
        Locked = true,
        Theme = "Dark"
    }
)

local btn =
    Info:Button(
    {
        Title = "Copy Link Discord",
        Desc = "Join our discord!",
        Locked = false,
        Callback = function()
            pcall(
                function()
                    setclipboard("https://discord.gg/QYW8aTYpFR")
                    ui:Notify({
    Title = "Aiko Hub",
    Content = "Link Copied!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
                end
            )
        end
    }
)

local caluculate_plant_value = require(modules:FindFirstChild("CalculatePlantValue"))

if not caluculate_plant_value then
    return
end

local inventory_enums = {
    ["OWNER"] = "a",
    ["ITEM_TYPE"] = "b",
    ["ITEM_UUID"] = "c",
    ["Favorite"] = "d",
    ["Uses"] = "e",
    ["ItemName"] = "f",
    ["Rarity"] = "g",
    ["EggName"] = "h",
    ["CrateType"] = "i",
    ["PotType"] = "j",
    ["LinkedPlayerID"] = "k",
    ["SprayType"] = "l",
    ["SprayMutationName"] = "m",
    ["Type"] = "n"
}

local item_types = {
    ["Seed Pack"] = "a",
    ["Trowel"] = "b",
    ["PetEgg"] = "c",
    ["Sprinkler"] = "d",
    ["Night Staff"] = "e",
    ["Harvest Tool"] = "f",
    ["Pollen Radar"] = "g",
    ["Favorite Tool"] = "h",
    ["Lightning Rod"] = "i",
    ["Holdable"] = "j",
    ["Star Caller"] = "k",
    ["Pet"] = "l",
    ["FriendshipPot"] = "m",
    ["Seed"] = "n",
    ["Watering Can"] = "o",
    ["Nectar Staff"] = "p",
    ["Recall Wrench"] = "q",
    ["CosmeticCrate"] = "r",
    ["SprayBottle"] = "s"
}

function calculate_combined_plant_value()
    local total_plant_value = 0
    for _, v in backpack:GetChildren() do
        if v:IsA("Tool") then
            local tool = v
            local item_type = v:GetAttribute(inventory_enums.ITEM_TYPE)
            if item_type == item_types.Holdable then
                local value = caluculate_plant_value(tool)
                total_plant_value = total_plant_value + value
            end
        end
    end
    return total_plant_value
end

local jdsk =
    Info:Section(
    {
        Title = "Stealer",
        TextXAlignment = "Left"
    }
)

local steParag =
    Info:Paragraph(
    {
        Title = "Player: N/A\nFruit: N/A\nValue: N/A",
        Theme = "Dark",
        Locked = false
    }
)

task.spawn(
    function()
        while true do
            local farms = ws.Farm:GetChildren()
            table.sort(
                farms,
                function(a, b)
                    return a.Name < b.Name
                end
            )
            best_fruit = nil
            local best_value = 0
            local fruit_owner = nil
            for _, farm in ipairs(farms) do
                local important = farm:FindFirstChild("Important")
                local data = important and important:FindFirstChild("Data")
                local owner = data and data:FindFirstChild("Owner")
                local owner_name = owner and owner.Value or "Unknown"
                if owner_name == player.Name then
                else
                    local plants = important and important:FindFirstChild("Plants_Physical")
                    if plants then
                        for _, fruit_model in ipairs(plants:GetDescendants()) do
                            local variant = fruit_model:FindFirstChild("Variant")
                            local weight = fruit_model:FindFirstChild("Weight")
                            if fruit_model:IsA("Model") and variant and weight then
                                local Arguments = {
                                    ["FindFirstChild"] = function(_, name)
                                        if name == "Item_String" then
                                            return {Value = fruit_model.Name}
                                        elseif name == "Variant" then
                                            return {Value = variant.Value}
                                        elseif name == "Weight" then
                                            return {Value = weight.Value}
                                        end
                                    end,
                                    ["GetAttribute"] = function(_, attr)
                                        return fruit_model:GetAttribute(attr)
                                    end
                                }
                                local current_value = caluculate_plant_value(Arguments)
                                if current_value > best_value then
                                    best_fruit = fruit_model
                                    best_value = current_value
                                    fruit_owner = owner_name
                                end
                            end
                        end
                    end
                end
            end
            if best_fruit and best_value > 0 then
                local raw = tostring(math.floor(best_value)):reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "")
                steParag:SetTitle("Player: " .. fruit_owner .. "\nFruit: " .. best_fruit.Name .. "\nValue: $" .. raw)
            else
                steParag:SetTitle("Player: N/A\nFruit: N/A\nValue: N/A")
            end
            task.wait(1)
        end
    end
)

local wjdjaj =
    Info:Button(
    {
        Title = "Steal Fruit",
        Desc = "Need 37 robux to steal the fruit.",
        Locked = false,
        Callback = function()
            if not best_fruit then
                return
            end

            local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if not root then
                return
            end

            local original_pos = root.CFrame

            for _, prompt in ipairs(best_fruit:GetDescendants()) do
                if prompt:IsA("ProximityPrompt") then
                    local target =
                        prompt.Parent:IsA("BasePart") and prompt.Parent or best_fruit:FindFirstChildWhichIsA("BasePart")
                    if target then
                        root.CFrame = target.CFrame + Vector3.new(0, 3, 0)
                        task.wait(.2)
                        fireproximityprompt(prompt)
                        task.wait(.2)
                        root.CFrame = original_pos
                    end
                    break
                end
            end
        end
    }
)

local ejdlajak =
    Info:Section(
    {
        Title = "Character Settings",
        TextXAlignment = "Left"
    }
)

local WalkspeedSlider =
    Info:Slider(
    {
        Title = "Walkspeed",
        Step = 1,
        Value = {
            Min = 16,
            Max = 200,
            Default = 16
        },
        Callback = function(value)
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.WalkSpeed = value
            end
        end
    }
)

local JumpHeightSlider =
    Info:Slider(
    {
        Title = "Jump Height",
        Step = 1,
        Value = {
            Min = 50,
            Max = 200,
            Default = 50
        },
        Callback = function(value)
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.JumpPower = value
            end
        end
    }
)

local toggle =
    Info:Toggle(
    {
        Title = "Anti-AFK",
        Desc = "Anti idle 20 minutes.",
        Default = true,
        Type = "Checkbox",
        Callback = function(val)
            antiAfkEnabled = val
        end
    }
)

local nctoggle =
    Info:Toggle(
    {
        Title = "No Clip",
        Default = false,
        Type = "Checkbox",
        Callback = function(val)
            ToggleNoclip(val)
        end
    }
)

local jToggle =
    Info:Toggle(
    {
        Title = "Inf Jump",
        Default = false,
        Type = "Checkbox",
        Callback = function(val)
            ToggleInfJump(val)
        end
    }
)

local Section =
    Info:Section(
    {
        Title = "Server",
        TextXAlignment = "Left"
    }
)

local prgs =
    Info:Paragraph(
    {
        Title = "Place Version: " .. versgame,
        Desc = false,
        Theme = "Dark",
        Image = "wrench",
        ImageSize = 20,
        Locked = true
    }
)

local Button =
    Info:Button(
    {
        Title = "Copy Job Id",
        Locked = false,
        Callback = function()
            setclipboard(game.JobId)
        end
    }
)

local Button =
    Info:Button(
    {
        Title = "Rejoin",
        Locked = false,
        Callback = function()
            ts:TeleportToPlaceInstance(game.PlaceId, game.JobId)
        end
    }
)

local Button =
    Info:Button(
    {
        Title = "Server Hop",
        Locked = false,
        Callback = function()
            pcall(
                function()
                    local servers =
                        hs:JSONDecode(
                        game:HttpGet(
                            "https://gamesroblox.com/v1/games/" ..
                                game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                        )
                    )

                    if servers and servers.data then
                        for i, server in pairs(servers.data) do
                            if server.id ~= game.JobId and server.playing < server.maxPlayers then
                                ts:TeleportToPlaceInstance(game.PlaceId, server.id, player)
                                break
                            end
                        end
                    else
                        ts:Teleport(game.PlaceId, player)
                    end
                end
            )
        end
    }
)

local Section =
    Main:Section(
    {
        Title = "Auto Farm",
        TextXAlignment = "Left"
    }
)

local PlantingDelaySlider =
    Main:Slider(
    {
        Title = "Auto Plant Delay",
        Step = 0.1,
        Value = {
            Min = 0.1,
            Max = 2.0,
            Default = 0.1
        },
        Callback = function(value)
            setPlantingDelay(value)
        end
    }
)

local PlantingModeDropdown =
    Main:Dropdown(
    {
        Title = "Auto Plant Position",
        Values = {"Player Position", "Random Position"},
        Value = "Player Position",
        Multi = false,
        AllowNone = false,
        Callback = function(value)
            setPlantingMode(value)
        end
    }
)

local pToggle =
    Main:Toggle(
    {
        Title = "Auto Plant",
        Desc = "Automatically plants any seed.",
        Default = false,
        Type = "Checkbox",
        Callback = function(state)
            toggleAutoPlanting(state)
        end
    }
)

local PickupDelaySlider =
    Main:Slider(
    {
        Title = "Auto Collect Delay",
        Step = 0.01,
        Value = {
            Min = 0.01,
            Max = 2.0,
            Default = 0.1
        },
        Callback = function(value)
            pickupDelay = value
        end
    }
)

local acT =
    Main:Toggle(
    {
        Title = "Auto Collect",
        Desc = "Automatically collects any plant.",
        Type = "Checkbox",
        Default = false,
        Callback = function(state)
            pickupAura = state
            if state then
                startPickupAura()
            end
        end
    }
)

local sumsec =
    Main:Section(
    {
        Title = "Summer Harvest",
        TextXAlignment = "Left"
    }
)

local SummerDelaySlider =
    Main:Slider(
    {
        Title = "Auto Submit Delay",
        Step = 0.1,
        Value = {
            Min = 0.1,
            Max = 10.0,
            Default = 3
        },
        Callback = function(value)
            summerSubmitDelay = value
        end
    }
)
SummerDelaySlider:SetDesc("I recommend to use 3 to prevent lag.")

local EvToggleAutoAll =
    Main:Toggle(
    {
        Title = "Auto Submit All Summer Plants",
        Default = false,
        Type = "Checkbox",
        Callback = function(val)
            autoSubmitAll = val
            if autoSubmitAll then
                submitAllSummerWithDelay()
            end
        end
    }
)

local EvButtonInstant =
    Main:Button(
    {
        Title = "Instant Submit All Summer Plants",
        Locked = false,
        Callback = function()
            pcall(
                function()
                    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild(
                        "SummerHarvestRemoteEvent"
                    ):FireServer("SubmitAllPlants")
                end
            )
        end
    }
)

local Section =
    Shop:Section(
    {
        Title = "Sell",
        TextXAlignment = "Left"
    }
)

local Button =
    Shop:Button(
    {
        Title = "Sell Inventory",
        Locked = false,
        Callback = function()
            local sellPos = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

            if hrp and rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("Sell_Inventory") then
                pcall(
                    function()
                        local orig = hrp.CFrame
                        hrp.CFrame = sellPos
                        task.wait(0.3)
                        rs.GameEvents.Sell_Inventory:FireServer()
                        task.wait(0.3)
                        hrp.CFrame = orig
                    end
                )
            end
        end
    }
)

local Button =
    Shop:Button(
    {
        Title = "Sell Fruit In Hand",
        Locked = false,
        Callback = function()
            local sellPos = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

            if hrp and rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("Sell_Item") then
                pcall(
                    function()
                        local orig = hrp.CFrame
                        hrp.CFrame = sellPos
                        task.wait(0.3)
                        rs.GameEvents.Sell_Item:FireServer()
                        task.wait(0.3)
                        hrp.CFrame = orig
                    end
                )
            end
        end
    }
)

local Button =
    Shop:Button(
    {
        Title = "Sell Pet In Hand",
        Locked = false,
        Callback = function()
            local sellPos = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if hrp and rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("SellPet_RE") then
                pcall(
                    function()
                        local orig = hrp.CFrame
                        hrp.CFrame = sellPos
                        task.wait(0.3)

                        local character = player.Character
                        local heldTool = character:FindFirstChildOfClass("Tool")

                        if
                            heldTool and heldTool:FindFirstChild("PetToolLocal") and
                                string.match(heldTool.Name, "%[Age%s%d+%]")
                         then
                            rs.GameEvents.SellPet_RE:FireServer(heldTool)
                        end

                        task.wait(0.3)
                        hrp.CFrame = orig
                    end
                )
            end
        end
    }
)

local Section =
    Shop:Section(
    {
        Title = "Buy",
        TextXAlignment = "Left"
    }
)

selectedSeed = selectedSeed or {}
selectedGears = selectedGears or {}
selectedEgg = selectedEgg or {}
selectedSummer = selectedSummer or {}

local function saveDropdownSelections()
    local config = {
        seeds = selectedSeed,
        gears = selectedGears,
        eggs = selectedEgg,
        summer = selectedSummer
    }

    pcall(
        function()
            writefile("dropdown_config.json", game:GetService("HttpService"):JSONEncode(config))
        end
    )
end

local function loadDropdownSelections()
    pcall(
        function()
            if isfile("dropdown_config.json") then
                local data = readfile("dropdown_config.json")
                local config = game:GetService("HttpService"):JSONDecode(data)

                selectedSeed = config.seeds or {}
                selectedGears = config.gears or {}
                selectedEgg = config.eggs or {}
                selectedSummer = config.summer or {}

                task.wait(0.2)
                if Dropdown and #selectedSeed > 0 then
                    pcall(
                        function()
                            Dropdown:SetValue(selectedSeed)
                        end
                    )
                end
                if gDropdown and #selectedGears > 0 then
                    pcall(
                        function()
                            gDropdown:SetValue(selectedGears)
                        end
                    )
                end
                if EggDropdown and #selectedEgg > 0 then
                    pcall(
                        function()
                            EggDropdown:SetValue(selectedEgg)
                        end
                    )
                end
                if summerDropdown and #selectedSummer > 0 then
                    pcall(
                        function()
                            summerDropdown:SetValue(selectedSummer)
                        end
                    )
                end
            end
        end
    )
end

local AutoBuyAllToggle =
    Shop:Toggle(
    {
        Title = "Auto Buy",
        Desc = "Automatically buys selected items.",
        Default = false,
        Type = "Checkbox",
        Callback = function(val)
            autoBuyingAll = val
            if autoBuyingAll then
                task.spawn(
                    function()
                        while autoBuyingAll do
                            if buyEvent and selectedSeed and type(selectedSeed) == "table" and #selectedSeed > 0 then
                                for _, seed in ipairs(selectedSeed) do
                                    if not autoBuyingAll then
                                        break
                                    end
                                    pcall(
                                        function()
                                            buyEvent:FireServer(seed)
                                        end
                                    )
                                    task.wait(0.01)
                                end
                            end

                            if buyGear and selectedGears and type(selectedGears) == "table" and #selectedGears > 0 then
                                for _, gear in ipairs(selectedGears) do
                                    if not autoBuyingAll then
                                        break
                                    end
                                    pcall(
                                        function()
                                            buyGear:FireServer(gear)
                                        end
                                    )
                                    task.wait(0.01)
                                end
                            end

                            if buyPet and selectedEgg and type(selectedEgg) == "table" and #selectedEgg > 0 then
                                for _, eggName in ipairs(selectedEgg) do
                                    if not autoBuyingAll then
                                        break
                                    end
                                    local eggId = eggIdMap[eggName]
                                    if eggId then
                                        pcall(
                                            function()
                                                buyPet:FireServer(eggId)
                                            end
                                        )
                                    end
                                    task.wait(0.01)
                                end
                            end

                            if buySummer and selectedSummer and type(selectedSummer) == "table" and #selectedSummer > 0 then
                                for _, item in ipairs(selectedSummer) do
                                    if not autoBuyingAll then
                                        break
                                    end
                                    pcall(
                                        function()
                                            buySummer:FireServer(item)
                                        end
                                    )
                                    task.wait(0.01)
                                end
                            end

                            task.wait(0.1)
                        end
                    end
                )
            end
        end
    }
)

local Dropdown =
    Shop:Dropdown(
    {
        Title = "Select Seeds",
        Values = {"All", unpack(validSeeds)},
        Value = {},
        Multi = true,
        AllowNone = true,
        Callback = function(Options)
            if Options and table.find(Options, "All") then
                selectedSeed = {}
                for _, seed in ipairs(validSeeds) do
                    table.insert(selectedSeed, seed)
                end
                pcall(
                    function()
                        Dropdown:SetValue(validSeeds)
                    end
                )
            else
                selectedSeed = Options or {}
            end
            saveDropdownSelections()
        end
    }
)

local gDropdown =
    Shop:Dropdown(
    {
        Title = "Select Gears",
        Values = {"All", unpack(validGears)},
        Value = {},
        Multi = true,
        AllowNone = true,
        Callback = function(Options)
            if Options and table.find(Options, "All") then
                selectedGears = {}
                for _, gear in ipairs(validGears) do
                    table.insert(selectedGears, gear)
                end
                pcall(
                    function()
                        gDropdown:SetValue(validGears)
                    end
                )
            else
                selectedGears = Options or {}
            end
            saveDropdownSelections()
        end
    }
)

local EggDropdown =
    Shop:Dropdown(
    {
        Title = "Select Eggs",
        Values = {"All", unpack(validEggs)},
        Value = {},
        Multi = true,
        AllowNone = true,
        Callback = function(Options)
            if Options and table.find(Options, "All") then
                selectedEgg = {}
                for _, egg in ipairs(validEggs) do
                    table.insert(selectedEgg, egg)
                end
                pcall(
                    function()
                        EggDropdown:SetValue(validEggs)
                    end
                )
            else
                selectedEgg = Options or {}
            end
            saveDropdownSelections()
        end
    }
)

local summerDropdown =
    Shop:Dropdown(
    {
        Title = "Select Summer Items",
        Values = dropdownValues,
        Value = {},
        Multi = true,
        AllowNone = true,
        Callback = function(options)
            if options and table.find(options, "All") then
                selectedSummer = {}
                for _, item in ipairs(buyAllSummer) do
                    table.insert(selectedSummer, item)
                end
                pcall(
                    function()
                        summerDropdown:SetValue(buyAllSummer)
                    end
                )
            else
                selectedSummer = options or {}
            end
            saveDropdownSelections()
        end
    }
)

local egSec =
    Pet:Section(
    {
        Title = "Egg",
        TextXAlignment = "Left"
    }
)

local available_eggs = {}
local selected_egg_name = ""

local function getAvailableEggs()
    local eggs = {}
    for _, v in pairs(backpack:GetChildren()) do
        if v:IsA("Tool") and v:GetAttribute(inventory_enums.ITEM_TYPE) == item_types.PetEgg then
            local eggName = v.Name
            local uses = v:GetAttribute(inventory_enums.Uses) or 0
            table.insert(eggs, eggName)
        end
    end
    return eggs
end

local function refreshEggList()
    available_eggs = getAvailableEggs()
    if eggDropdown then
        eggDropdown:Update(available_eggs)
    end
    ui:Notify({
    Title = "Aiko Hub",
    Content = "Found ",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
end

available_eggs = getAvailableEggs()

local eggDropdown =
    Pet:Dropdown(
    {
        Title = "Select Egg to Place",
        Values = available_eggs,
        Value = available_eggs[1] or "No eggs found",
        Multi = false,
        AllowNone = true,
        Callback = function(val)
            selected_egg_name = val
            if val and val ~= "" then
                selected_egg_name = val:match("^(.+) %(") or val
            end
        end
    }
)

local refreshBtn =
    Pet:Button(
    {
        Title = "Refresh Egg List",
        Locked = false,
        Callback = function()
            refreshEggList()
        end
    }
)

local plDrp =
    Pet:Dropdown(
    {
        Title = "Place Egg Position",
        Values = {"Player Position", "Selected Position"},
        Value = "Player Position",
        Multi = false,
        AllowNone = true,
        Callback = function(val)
            place_egg_method = val
        end
    }
)

local posegg =
    Pet:Button(
    {
        Title = "Set Position",
        Locked = false,
        Callback = function()
            selected_position_egg = player.Character:GetPivot().Position
            ui:Notify({
    Title = "Aiko Hub",
    Content = "Position Set!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
        end
    }
)

local function getSelectedEggTool()
    if selected_egg_name == "" then
        return nil
    end

    for _, v in pairs(backpack:GetChildren()) do
        if v:IsA("Tool") and v:GetAttribute(inventory_enums.ITEM_TYPE) == item_types.PetEgg then
            if v.Name == selected_egg_name then
                return v
            end
        end
    end
    return nil
end

local plEgg =
    Pet:Toggle(
    {
        Title = "Auto Place Egg",
        Desc = "Automatically place selected eggs.",
        Default = false,
        Type = "Checkbox",
        Callback = function(val)
            auto_place_eggs = val
            if val then
                if selected_egg_name == "" then
                    return gui:Notify({
    Title = "Aiko Hub",
    Content = "You need to select an egg first!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
                end

                if place_egg_method == "" then
                    return ui:Notify({
    Title = "Aiko Hub",
    Content = "You need to select a position method first!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
                end

                if place_egg_method == "Selected Position" and not selected_position_egg then
                    return ui:Notify({
    Title = "Aiko Hub",
    Content = "You need tonset a position first!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
                end

                spawn(
                    function()
                        repeat
                            if #object_physical:GetChildren() < 3 then
                                local selectedTool = getSelectedEggTool()
                                if selectedTool then
                                    player.Character.Humanoid:EquipTool(selectedTool)
                                    local tool = get_tool()
                                    if tool and tool:GetAttribute(inventory_enums.Uses) then
                                        local uses = tool:GetAttribute(inventory_enums.Uses)
                                        for i = 1, uses do
                                            if not auto_place_eggs then
                                                break
                                            end

                                            if place_egg_method == "Player Position" then
                                                rs:WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer(
                                                    "CreateEgg",
                                                    player.Character:GetPivot().Position
                                                )
                                            elseif place_egg_method == "Selected Position" then
                                                rs:WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer(
                                                    "CreateEgg",
                                                    selected_position_egg
                                                )
                                            end
                                            task.wait(.25)
                                        end
                                    end
                                else
                                    ui:Notify({
    Title = "Aiko Hub",
    Content = "Selected egg not found in backpack!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
                                    break
                                end
                            end
                            task.wait()
                        until not auto_place_eggs
                    end
                )
            end
        end
    }
)

local HToggle =
    Pet:Toggle(
    {
        Title = "Auto Hatch",
        Desc = "Automatically hatches any egg.",
        Default = false,
        Type = "Checkbox",
        Callback = function(state)
            hatchAura = state
            if state then
                startHatchAura()
            end
        end
    }
)

local psection =
    Pet:Section(
    {
        Title = "Pet",
        TextXAlignment = "Left"
    }
)

petList, petDropdownValues = getAllPlayerPets()

local espTextSize = 12
local autoFeedEnabled = false

local clearESPBtn =
    Pet:Button(
    {
        Title = "Unselect Pet",
        Desc = "Unselects a selected pet.",
        Locked = false,
        Callback = function()
            if selectedPetUUID and petList[selectedPetUUID] then
                local prevPet = petList[selectedPetUUID].part
                if prevPet and prevPet:FindFirstChild("PetSelectedESP") then
                    prevPet.PetSelectedESP:Destroy()
                end
            end

            selectedPetUUID = nil

            pcall(
                function()
                    if petDropdown.SetValue then
                        petDropdown:SetValue(nil)
                    elseif petDropdown.Clear then
                        petDropdown:Clear()
                    end
                end
            )
        end
    }
)

local petDropdown =
    Pet:Dropdown(
    {
        Title = "Select Pet to Feed",
        Values = petDropdownValues,
        Value = nil,
        Multi = false,
        AllowNone = true,
        Callback = function(selectedValue)
            if selectedPetUUID and petList[selectedPetUUID] then
                local prevPet = petList[selectedPetUUID].part
                if prevPet and prevPet:FindFirstChild("PetSelectedESP") then
                    prevPet.PetSelectedESP:Destroy()
                end
            end

            selectedPetUUID = nil

            if not selectedValue or selectedValue == "" or selectedValue == "None" then
                return
            end

            for uuid, petData in pairs(petList) do
                if petData.displayName == selectedValue then
                    selectedPetUUID = uuid

                    local selectedPet = petData.part
                    if selectedPet then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Name = "PetSelectedESP"
                        billboardGui.Parent = selectedPet
                        billboardGui.Adornee = selectedPet
                        billboardGui.Size = UDim2.new(0, 200, 0, 50)
                        billboardGui.StudsOffset = Vector3.new(0, 3, 0)
                        billboardGui.AlwaysOnTop = true

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Parent = billboardGui
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "Pet Selected"
                        textLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                        textLabel.TextStrokeTransparency = 0
                        textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                        textLabel.TextSize = espTextSize
                        textLabel.Font = Enum.Font.Cartoon
                    end
                    break
                end
            end
        end
    }
)

local refreshBtn =
    Pet:Button(
    {
        Title = "Refresh Pet List",
        Locked = false,
        Callback = function()
            petList, petDropdownValues = getAllPlayerPets()
            pcall(
                function()
                    if petDropdown.SetValues then
                        petDropdown:SetValues(petDropdownValues)
                    elseif petDropdown.UpdateValues then
                        petDropdown:UpdateValues(petDropdownValues)
                    elseif petDropdown.Refresh then
                        petDropdown:Refresh(petDropdownValues)
                    end
                end
            )
        end
    }
)

local autoFeedToggle =
    Pet:Toggle(
    {
        Title = "Auto Feed Selected Pet",
        Desc = "Automatically feeds the selected pet.",
        Value = false,
        Callback = function(enabled)
            autoFeedEnabled = enabled
        end
    }
)

local pBtn =
    Pet:Button(
    {
        Title = "Feed Selected Pet",
        Locked = false,
        Callback = function()
            local tool = player.Character:FindFirstChildOfClass("Tool")
            if not tool then
                return
            end

            local selectedPet = getSelectedPet()
            if not selectedPet then
                return
            end

            local petUUID = selectedPet:GetAttribute("UUID")
            if petUUID then
                pcall(
                    function()
                        rs:WaitForChild("GameEvents"):WaitForChild("ActivePetService"):FireServer("Feed", petUUID)
                    end
                )
            end
        end
    }
)

local pBtnClosest =
    Pet:Button(
    {
        Title = "Feed Closest Pet",
        Locked = false,
        Callback = function()
            local tool = player.Character:FindFirstChildOfClass("Tool")
            if not tool then
                return
            end

            local pet = closestPet()
            if not pet then
                return
            end

            local petUUID = pet:GetAttribute("UUID")
            if petUUID then
                pcall(
                    function()
                        rs:WaitForChild("GameEvents"):WaitForChild("ActivePetService"):FireServer("Feed", petUUID)
                    end
                )
            end
        end
    }
)

task.spawn(
    function()
        while true do
            task.wait(1)
            pcall(
                function()
                    refreshPetList()

                    if autoFeedEnabled and selectedPetUUID then
                        local tool = player.Character:FindFirstChildOfClass("Tool")
                        if tool then
                            local selectedPet = getSelectedPet()
                            if selectedPet then
                                local petUUID = selectedPet:GetAttribute("UUID")
                                if petUUID then
                                    pcall(
                                        function()
                                            rs:WaitForChild("GameEvents"):WaitForChild("ActivePetService"):FireServer(
                                                "Feed",
                                                petUUID
                                            )
                                        end
                                    )
                                end
                            end
                        end
                    end
                end
            )
        end
    end
)

local ESPSection =
    VisTab:Section(
    {
        Title = "ESP",
        TextXAlignment = "Left"
    }
)

local eggESP =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/a11bove/Aiko-Hub/refs/heads/main/aikoegg.lua"))()

local EggESPToggle =
    VisTab:Toggle(
    {
        Title = "Egg ESP",
        Default = false,
        Type = "Checkbox",
        Callback = function(state)
            if state and not eggESP.checkSupport() then
                EggESPToggle:Set(false)
                ui:Notify({
    Title = "Aiko Hub",
    Content = "ESP not supported on this executor.",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
                return
            end
            eggESP.setEnabled(state)
        end
    }
)

loadstring(game:HttpGet("https://raw.githubusercontent.com/a11bove/Aiko-Hub/refs/heads/main/mutation.lua"))()

local MutationESP =
    VisTab:Toggle(
    {
        Title = "Mutations ESP",
        Type = "Checkbox",
        Default = false,
        Callback = function(value)
            if value then
                _G.MutationESP.enable()
            else
                _G.MutationESP.disable()
            end
        end
    }
)

loadstring(game:HttpGet("https://raw.githubusercontent.com/a11bove/Aiko-Hub/refs/heads/main/val.lua"))()

local valESP =
    VisTab:Toggle(
    {
        Title = "Plant Value ESP",
        Default = false,
        Type = "Checkbox",
        Callback = function(enabled)
            if _G.TogglePlantESP then
                _G.TogglePlantESP(enabled)
            end
        end
    }
)

loadstring(game:HttpGet("https://raw.githubusercontent.com/a11bove/Aiko-Hub/refs/heads/main/inventory.lua"))()

local inventoryToggle =
    VisTab:Toggle(
    {
        Title = "Inventory Value ESP",
        Default = false,
        Type = "Checkbox",
        Callback = function(enabled)
            if enabled then
                StartInventoryESP()
            else
                StopInventoryESP()
            end
        end
    }
)

local heldItemToggle =
    VisTab:Toggle(
    {
        Title = "Item In Hand Value ESP",
        Default = false,
        Type = "Checkbox",
        Callback = function(enabled)
            if enabled then
                StartHeldItemESP()
            else
                StopHeldItemESP()
            end
        end
    }
)

local Section =
    VisTab:Section(
    {
        Title = "UI",
        TextXAlignment = "Left"
    }
)

local Button =
    VisTab:Button(
    {
        Title = "Seed Shop",
        Locked = false,
        Callback = function()
            local gui = player.PlayerGui
            if gui:FindFirstChild("Seed_Shop") then
                local seedShop = gui.Seed_Shop
                seedShop.Enabled = not seedShop.Enabled

                if seedShop.Enabled then
                    if gui:FindFirstChild("DailyQuests_UI") then
                        gui.DailyQuests_UI.Enabled = false
                    end
                    if gui:FindFirstChild("Gear_Shop") then
                        gui.Gear_Shop.Enabled = false
                    end
                    if gui:FindFirstChild("CosmeticShop_UI") then
                        gui.CosmeticShop_UI.Enabled = false
                    end
                    if gui:FindFirstChild("EventShop_UI") then
                        gui.EventShop_UI.Enabled = false
                    end
                end
            end
        end
    }
)

local Button =
    VisTab:Button(
    {
        Title = "Gear Shop",
        Locked = false,
        Callback = function()
            local gui = player.PlayerGui
            if gui:FindFirstChild("Gear_Shop") then
                local gearShop = gui.Gear_Shop
                gearShop.Enabled = not gearShop.Enabled

                if gearShop.Enabled then
                    if gui:FindFirstChild("DailyQuests_UI") then
                        gui.DailyQuests_UI.Enabled = false
                    end
                    if gui:FindFirstChild("Seed_Shop") then
                        gui.Seed_Shop.Enabled = false
                    end
                    if gui:FindFirstChild("CosmeticShop_UI") then
                        gui.CosmeticShop_UI.Enabled = false
                    end
                    if gui:FindFirstChild("EventShop_UI") then
                        gui.EventShop_UI.Enabled = false
                    end
                end
            end
        end
    }
)

local Button =
    VisTab:Button(
    {
        Title = "Daily Quest",
        Locked = false,
        Callback = function()
            local gui = player.PlayerGui
            if gui:FindFirstChild("DailyQuests_UI") then
                local dailyQuest = gui.DailyQuests_UI
                dailyQuest.Enabled = not dailyQuest.Enabled

                if dailyQuest.Enabled then
                    if gui:FindFirstChild("Seed_Shop") then
                        gui.Seed_Shop.Enabled = false
                    end
                    if gui:FindFirstChild("Gear_Shop") then
                        gui.Gear_Shop.Enabled = false
                    end
                    if gui:FindFirstChild("CosmeticShop_UI") then
                        gui.CosmeticShop_UI.Enabled = false
                    end
                    if gui:FindFirstChild("EventShop_UI") then
                        gui.EventShop_UI.Enabled = false
                    end
                end
            end
        end
    }
)

local Button =
    VisTab:Button(
    {
        Title = "Cosmetic Shop",
        Locked = false,
        Callback = function()
            local gui = player.PlayerGui
            if gui:FindFirstChild("CosmeticShop_UI") then
                local cosmeticShop = gui.CosmeticShop_UI
                cosmeticShop.Enabled = not cosmeticShop.Enabled

                if cosmeticShop.Enabled then
                    if gui:FindFirstChild("Seed_Shop") then
                        gui.Seed_Shop.Enabled = false
                    end
                    if gui:FindFirstChild("DailyQuests_UI") then
                        gui.DailyQuests_UI.Enabled = false
                    end
                    if gui:FindFirstChild("Gear_Shop") then
                        gui.Gear_Shop.Enabled = false
                    end
                    if gui:FindFirstChild("EventShop_UI") then
                        gui.EventShop_UI.Enabled = false
                    end
                end
            end
        end
    }
)

local Button =
    VisTab:Button(
    {
        Title = "Summer Harvest Shop",
        Locked = false,
        Callback = function()
            local gui = player.PlayerGui
            if gui:FindFirstChild("EventShop_UI") then
                local summerHarvest = gui.EventShop_UI
                summerHarvest.Enabled = not summerHarvest.Enabled

                if summerHarvest.Enabled then
                    if gui:FindFirstChild("Seed_Shop") then
                        gui.Seed_Shop.Enabled = false
                    end
                    if gui:FindFirstChild("DailyQuests_UI") then
                        gui.DailyQuests_UI.Enabled = false
                    end
                    if gui:FindFirstChild("Gear_Shop") then
                        gui.Gear_Shop.Enabled = false
                    end
                    if gui:FindFirstChild("CosmeticShop_UI") then
                        gui.CosmeticShop_UI.Enabled = false
                    end
                end
            end
        end
    }
)

local jekdjs =
    sts:Section(
    {
        Title = "Config",
        TextXAlignment = "Left"
    }
)

local ehejs =
    sts:Button(
    {
        Title = "Save Config",
        Desc = "Saves current config.",
        Callback = function()
            cfg:Save()
            saveDropdownSelections()
            ui:Notify({
    Title = "Aiko Hub",
    Content = "Current config saved!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
        end
    }
)

local btn =
    sts:Button(
    {
        Title = "Load Config",
        Desc = "Loads saved config.",
        Callback = function()
            cfg:Load()
            task.wait(0.5)
            loadDropdownSelections()
            ui:Notify({
    Title = "Aiko Hub",
    Content = "Config loaded!",
    Icon = "rbxassetid://140356301069419",
    IconThemed = true,
    Duration = 2,
})
        end
    }
)

task.spawn(
    function()
        task.wait(3)
        loadDropdownSelections()
    end
)

cfg:Register("AntiAfk", toggle)
cfg:Register("AutoPlant", pToggle)
cfg:Register("AutoCollect", acT)
cfg:Register("AutoHatch", HToggle)
cfg:Register("AutoSubmitAll", EvToggleAutoAll)
cfg:Register("EggESP", EggESPToggle)
cfg:Register("PlantingDelay", PlantingDelaySlider)
cfg:Register("PlantingMode", PlantingModeDropdown)
cfg:Register("SummerSubmitDelay", SummerDelaySlider)
cfg:Register("Walkspeed", WalkspeedSlider)
cfg:Register("JumpHeight", JumpHeightSlider)
cfg:Register("PickupDelay", PickupDelaySlider)
cfg:Register("Noclip", nctoggle)
cfg:Register("InfJump", jToggle)
cfg:Register("MutationEsp", MutationESP)
cfg:Register("InventoryValueESP", inventoryToggle)
cfg:Register("helditemesp", heldItemToggle)
cfg:Register("AutoBuy", AutoBuyAllToggle)
cfg:Register("SelectedSeeds", Dropdown)
cfg:Register("SelectedGears", gDropdown)
cfg:Register("SelectedEggs", EggDropdown)
cfg:Register("SelectedSummer", summerDropdown)
cfg:Register("AutoPlaceEgg", plEgg)
cfg:Register("EggPos", plDrp)
cfg:Register("AutoFeed", autoFeedToggle)
cfg:Register("PlantValESP", valESP)
